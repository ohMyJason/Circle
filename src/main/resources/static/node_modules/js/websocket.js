var websocket = null;
//判断当前浏览器是否支持WebSocket
if ('WebSocket' in window) {
    websocket = new WebSocket("ws://localhost/websocket");
} else {
    alert('Not support websocket');
}

//连接发生错误的回调方法
websocket.onerror = function () {
    // setMessageInnerHTML("error");
    layui.use('layer', function () {
        var layer = layui.layer;
        layer.alert("连接出现错误，请重新连接");
    })

};

//连接成功建立的回调方法
websocket.onopen = function (event) {
    // setMessageInnerHTML("open");
    console.log("连接成功");
    // layui.use('layer', function () {
    //     var layer = layui.layer;
    //     layer.alert("连接成功");
    // })
}

//接收到消息的回调方法
websocket.onmessage = function (event) {
   console.log(event.data);
   var data = JSON.parse(event.data);
   var myUserName = "";
   $.ajax({
       url:"/userInfo/getUserInfo",
       headers:{"token":$.cookie("token")},
       dataType:"json",
       type:"post",
       async:false,
       success:function (res) {
           if (res.code==0){
               myUserName=res.data.userName;
               console.log(myUserName);
           }
       },
       error:function () {
           layer.msg("未登录或登录过期，请重新登录");
           setTimeout(function () {
               window.location.href="/"
           },1000);
       }
   })

   if (data.userName==myUserName){
       console.log("是我是我，我要刷新");
       vm.getOnlineMsg(data.senterName);
   }
}

//连接关闭的回调方法
websocket.onclose = function () {
    // setMessageInnerHTML("close");
}

//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。
window.onbeforeunload = function () {
    websocket.close();
}

