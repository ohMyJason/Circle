<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lanqiao.circle.mapper.UsersMapper" >
  <resultMap id="BaseResultMap" type="com.lanqiao.circle.entity.Users" >
    <id column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="INTEGER" />
    <result column="is_single" property="isSingle" jdbcType="INTEGER" />
    <result column="birthday" property="birthday" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="VARCHAR" />
    <result column="avatar_url" property="avatarUrl" jdbcType="VARCHAR" />
    <result column="is_delete" property="isDelete" jdbcType="INTEGER" />
    <result column="address" property="address" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    user_id , user_name, password, phone, email, sex, is_single, birthday, status, create_time,
    avatar_url, is_delete, address
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from tb_users
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from tb_users
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lanqiao.circle.entity.Users" >
    insert into tb_users (user_id, user_name, password, 
      phone, email, sex, 
      is_single, birthday, status, 
      create_time, avatar_url, is_delete, 
      address)
    values (#{userId,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{sex,jdbcType=INTEGER}, 
      #{isSingle,jdbcType=INTEGER}, #{birthday,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, 
      #{createTime,jdbcType=VARCHAR}, #{avatarUrl,jdbcType=VARCHAR}, #{isDelete,jdbcType=INTEGER}, 
      #{address,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.lanqiao.circle.entity.Users" useGeneratedKeys="true" keyProperty="userId">
    insert into tb_users
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="isSingle != null" >
        is_single,
      </if>
      <if test="birthday != null" >
        birthday,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="avatarUrl != null" >
        avatar_url,
      </if>
      <if test="isDelete != null" >
        is_delete,
      </if>
      <if test="address != null" >
        address,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=INTEGER},
      </if>
      <if test="isSingle != null" >
        #{isSingle,jdbcType=INTEGER},
      </if>
      <if test="birthday != null" >
        #{birthday,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="avatarUrl != null" >
        #{avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="isDelete != null" >
        #{isDelete,jdbcType=INTEGER},
      </if>
      <if test="address != null" >
        #{address,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lanqiao.circle.entity.Users" >
    update tb_users
    <set >
      <if test="userName != null" >
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=INTEGER},
      </if>
      <if test="isSingle != null" >
        is_single = #{isSingle,jdbcType=INTEGER},
      </if>
      <if test="birthday != null" >
        birthday = #{birthday,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="avatarUrl != null" >
        avatar_url = #{avatarUrl,jdbcType=VARCHAR},
      </if>
      <if test="isDelete != null" >
        is_delete = #{isDelete,jdbcType=INTEGER},
      </if>
      <if test="address != null" >
        address = #{address,jdbcType=VARCHAR},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lanqiao.circle.entity.Users" >
    update tb_users
    set user_name = #{userName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=INTEGER},
      is_single = #{isSingle,jdbcType=INTEGER},
      birthday = #{birthday,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=VARCHAR},
      avatar_url = #{avatarUrl,jdbcType=VARCHAR},
      is_delete = #{isDelete,jdbcType=INTEGER},
      address = #{address,jdbcType=VARCHAR}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>

  <select id="getAllUser" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"/>
    from  tb_users
  </select>

  <select id="selectUserInfo" resultType="hashmap" parameterType="java.lang.Integer">
    select user_id as 'userId',user_name as 'userName',avatar_url as 'avatarUrl' from tb_users
    where user_id = #{userId,jdbcType=INTEGER}
  </select>

  <select id="selectUserByUserNameOrPhoneOrEmailAndPassword" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"/>
    from tb_users
    where
    (user_name = #{userName} or phone = #{phone} or email = #{email}) and password = #{password}
  </select>

  <select id="getUserAllBlog" resultType="com.lanqiao.circle.entity.BlogInfo">
    select DISTINCT blogId,userId,createTime,content,isRepost,repostId,circleId,weight,type,userName,avatarUrl,circleName,likeNum,commentNum
    from index_blog
    where userId = #{userId} and isDelete = 0 ORDER BY createTime DESC LIMIT #{pageIndex},#{size}
  </select>

  <select id="getAllResource" resultType="java.lang.String" parameterType="java.lang.Integer">
    select resourceUrl from index_blog where blogId = #{blogId,jdbcType=INTEGER}
  </select>

  <select id="getRepostBlog" resultType="com.lanqiao.circle.entity.BlogInfo" parameterType="java.lang.Integer">
     select DISTINCT blogId,userId,createTime,content,isRepost,repostId,circleId,weight,type,userName,avatarUrl,circleName,likeNum,commentNum
    from index_blog
    where blogId = #{repostId}
  </select>

  <select id="normalUsers" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"/>
    from tb_users
    where status = 0 and is_delete = 0
    <where>
      <if test="userName!=null">
        user_name like '%${userName}%'
      </if>
    </where>
    LIMIT #{start},#{limit}
  </select>

  <select id="getCount"  resultType="integer">
    select count(*)
    from tb_users
    <where>
      <if test="userName!=null">
        user_name like '%${userName}%'
      </if>
    </where>
  </select>

  <update id="deleteUsers" parameterType="com.lanqiao.circle.entity.Users" >
    update tb_users
    set is_delete = 1
    where userId = #{userId}
  </update>

  <update id="bannedUsers" parameterType="com.lanqiao.circle.entity.Users" >
    update tb_users
    set status = 1
    where userId = #{userId}
  </update>
  
  <select id="findUsers" resultType="com.lanqiao.circle.entity.Users" parameterType="java.lang.String">
    select user_name
    from tb_users
    where user_name LIKE concat(concat("%",#{userName,jdbcType=VARCHAR}),"%")
  </select>

  <select id="getUserByUserName" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"/>
    from tb_users
    where user_name = #{userName}
  </select>
</mapper>